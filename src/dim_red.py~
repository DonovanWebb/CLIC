import numpy as np
import time


def fitmodel(sinos, model, num_pca):
    # LINEAR
    if model == 'PCA':
        from sklearn.decomposition import PCA
        model = PCA(n_components=num_pca)
    # MANIFOLDS
    elif model == 'Isomap':
        from sklearn.manifold import Isomap
        model = Isomap(n_components=num_pca)
    elif model == 'LLE':
        from sklearn.manifold import LocallyLinearEmbedding as LLE
        model = LLE(n_components=num_pca, n_neighbors=5)
    elif model == 'MDS':
        from sklearn.manifold import MDS
        model = MDS(n_components=num_pca)
    elif model == 'TSNE':
        from sklearn.manifold import TSNE
        model = TSNE(n_components=num_pca)

    start_train = time.time()
    sinos_trans = model.fit_transform(sinos)
    end_train = time.time()
    print(f'Time to Train model : {end_train-start_train}')

    comp_vects = []
    for x in sinos_trans.T:
        comp_vects.append(np.var(x))

    return sinos_trans
